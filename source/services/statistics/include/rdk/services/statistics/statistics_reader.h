/*
 * SPDX-FileCopyrightText: NVIDIA CORPORATION & AFFILIATES
 * Copyright (c) 2025 NVIDIA CORPORATION & AFFILIATES. All rights reserved.
 * SPDX-License-Identifier: Apache-2.0
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

#ifndef RDK_SERVICES_STATISTICS_STATISTICS_READER_H_
#define RDK_SERVICES_STATISTICS_STATISTICS_READER_H_

#include <cstdint>
#include <functional>
#include <unordered_map>

#include <rmx_stats_api.h>

#include "rdk/services/error_handling/error_handling.h"


namespace rivermax
{
namespace dev_kit
{
namespace services
{

class StatisticsReader;
typedef std::function<void(StatisticsReader *reader)> statistics_handler_cb_t;
typedef std::unordered_map<rmx_stats_type, statistics_handler_cb_t> statistics_handler_cb_map_t;

/**
 * @brief: Basic class for Rivermax statistics reader.
 *
 * This is a basic class offers common statistics reader implementation.
 * The user of this interface can override it's virtual methods.
 */
class StatisticsReader
{
protected:
    /** Statistics related */
    /* A descriptor for statistics consumer configuration */
    rmx_stats_config m_stats_config;
    /* A descriptor for a statistics message */
    rmx_stats_message m_stats_message;
    /* A descriptor for statistics consumer */
    rmx_stats_consumer m_stats_consumer;
    /* Statistics generating process ID, default 0 is local process */
    uint32_t m_process_id;
    /* Indicator on whether statistics consumer created correctly */
    bool m_stats_consumer_created;
    /** Statistics filter related parameters  */
    /* If not equal 0 - filter statistics by by m_thread_id */
    uint32_t m_thread_id;
    /* If not equal UINT_MAX - filter statistics by session_id */
    uint32_t m_session_id;
    /** CPU affinity related */
    int m_cpu_core_affinity;
    /** Reader related */
    /* Sleep duration in seconds before every cycle of statistics reading */
    uint32_t m_update_time_sec;
    /* Statistics type to handler method map */
    statistics_handler_cb_map_t m_statistics_handler_cb_map;
public:
    StatisticsReader();
    virtual ~StatisticsReader();
    /**
     * @brief: Initializes statistics discriptors and common default settings.
     *
     * This method creates statistics consumer and attach to statistics message queue.
     *
     * @return: Status of the operation as defined by @ref ReturnStatus.
     */
    virtual ReturnStatus init_stats_reader();
    /**
     * @brief: Sets statistics configuration.
     *
     * The user can override this function, to override specific default statistics settings
     * like the types of the statistics messages Rivermax is required to generate.
     *
     * @return: Status of the operation as defined by @ref ReturnStatus.
     */
    virtual ReturnStatus set_stats_config();
    /**
     * @brief: Starts statistics reader operation.
     *
     * This operator initializes the statistics reader and starts to read statistics messages in a loop.
     */
    virtual void operator()();
    /**
     * @brief: Sets process ID.
     *
     * If process ID value is set to value different from 0, attach to statistics generated by remote process.
     * If the process do not use @ref rivermax_init it should call @ref rmx_stats_init
     * before starting using statistics related operations.
     *
     * @param [in] process_id: Process ID.
     */
    void set_sprocess_id(uint32_t process_id) { m_process_id = process_id; }
    /**
     * @brief: Sets filtered session ID.
     *
     * This is used by the skip method to skip session IDs, if this value different from UINT_MAX.
     *
     * @param [in] session_id: Session ID.
     */
    void set_session_id(uint32_t session_id) { m_session_id = session_id; }
    /**
     * @brief: Sets filtered thread ID.
     *
     * This is used by the skip method to skip thread IDs, if this value different from 0.
     *
     * @param [in] thread_id: Thread ID.
     */
    void set_thread_id(uint32_t thread_id) { m_thread_id = thread_id; }
    /**
     * @brief: Sets CPU core affinity for statistics reader thread.
     *
     * @param [in] cpu_core_affinity: Core number.
     */
    void  set_cpu_core_affinity(int cpu_core_affinity) { m_cpu_core_affinity = cpu_core_affinity; }
protected:
    /**
     * @brief: Reads one statistic message in to m_stats_message data member.
     *
     * @return: Status of the operation:
     *          @ref ReturnStatus::success - There might be additional messages to be read.
     *          @ref ReturnStatus::no_free_chunks - No additional messages to be read.
     *          @ref ReturnStatus::signal_received - If operation was interrupted by an OS signal.
     */
    virtual ReturnStatus read_stats_msg();
    /**
     * @brief: Checks is the message should be skiped.
     *
     * @return: true if the message should be skiped.
     */
    virtual bool skip();
    /**
     * @brief: Handles the statistic message stored in m_stats_message data member.
     *
     *  The curent implementation of handling the message is to write it to the standard output.
     *  The user of this interface can override statistics type specific functions to handle the message differently.
     */
    virtual void handle_msg();
    /**
     * @brief: Handles the statistic message type session start.
     */
    virtual void handle_session_start();
    /**
     * @brief: Handles the statistic message type session stop.
     */
    virtual void handle_session_stop();
    /**
     * @brief: Handles the statistic message type session runtime.
     */
    virtual void handle_session_run();
    /**
     * @brief: Handles the statistic message type TX queue.
     */
    virtual void handle_tx_queue();
    /**
     * @brief: Handles the statistic message type RX queue.
     */
    virtual void handle_rx_queue();
    /**
     * @brief: Handles statistic message with unknown type..
     */
    virtual void handle_unknown();
    /**
     * @brief: Displasy message header.
     */
    virtual void display_hdr();
private:
    static statistics_handler_cb_map_t s_statistics_handler_cb_map;
};

} // namespace services
} // namespace dev_kit
} // namespace rivermax

#endif /* RDK_SERVICES_STATISTICS_STATISTICS_READER_H_ */
